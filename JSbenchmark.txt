https://jsbenchmark.com/#{"cases":[{"id":"z3zJ5bRVvmB7MdSfzHg0W","code":"function filterRecipes(word) {\n    let filtered = [];\n    if (word.length > 2)\n        filtered = DATA.filter(recipe =>\n            recipe.ingredients.some(ing => ing.ingredient.toLowerCase().includes(word.toLowerCase())) ||\n            recipe.name.toLowerCase().includes(word.toLowerCase()) ||\n            recipe.description.toLowerCase().includes(word.toLowerCase())\n        );\n\n    console.log(`Résultats pour \"${word}\":`, filtered);\n    return filtered;\n}\n\nconst toSearch = [\"chocolat\", \"pomme de terre\", \"dsgydfgjkkh\", \"coco\", \"CAROTTES\", \"sucre\", \" \"];\n\nfor (let word of toSearch) {\n    filterRecipes(word);\n}\n","name":"Filter","dependencies":[]},{"id":"Na619LRv-mLvg6g1r0Xam","code":"function filterRecipes(word) {\n    let filtered = [];\n\n    if (word.length > 2) {\n        for (let i = 0; i < DATA.length; i++) {\n            let recipe = DATA[i];\n            let matchFound = false;\n\n            // Vérifie les ingrédients\n            for (let j = 0; j < recipe.ingredients.length; j++) {\n                let ing = recipe.ingredients[j];\n                if (ing.ingredient.toLowerCase().includes(word)) {\n                    matchFound = true;\n                    break;\n                }\n            }\n\n            // Vérifie le nom ou la description si aucun ingrédient n'a matché\n            if (!matchFound) {\n                if (recipe.name.toLowerCase().includes(word) || recipe.description.toLowerCase().includes(word)) {\n                    matchFound = true;\n                }\n            }\n\n            if (matchFound) {\n                filtered.push(recipe);\n            }\n        }\n    } else {\n        // Si le mot a 2 lettres ou moins, retourne tous les recipes\n        for (let i = 0; i < DATA.length; i++) {\n            filtered.push(DATA[i]);\n        }\n    }\n\n    return filtered;\n}\n","name":"For if","dependencies":[]}],"config":{"name":"Basic example","parallel":true,"globalTestConfig":{"dependencies":[{"url":"","name":"","esm":false}]},"dataCode":"return [\n    {\n        \"id\": 1,\n        \"image\": \"Recette01.jpg\",\n        \"name\" : \"Limonade de Coco\",\n        \"servings\" : 1,\n        \"ingredients\": [\n            {\n                \"ingredient\" : \"Lait de coco\",\n                \"quantity\" : 400,\n                \"unit\" : \"ml\"\n            },\n            {\n                \"ingredient\" : \"Jus de citron\",\n                \"quantity\" : 2\n            },\n            {\n                \"ingredient\" : \"Crème de coco\",\n                \"quantity\" : 2,\n                \"unit\" : \"cuillères à soupe\"\n            },\n            {\n                \"ingredient\" : \"Sucre\",\n                \"quantity\" : 30,\n                \"unit\" : \"grammes\"\n            },\n            {\n                \"ingredient\": \"Glaçons\"\n            }\n        ],\n        \"time\": 10,\n        \"description\": \"Mettre les glaçons à votre goût dans le blender, ajouter le lait, la crème de coco, le jus de 2 citrons et le sucre. Mixer jusqu'à avoir la consistence désirée\",\n        \"appliance\": \"Blender\",\n        \"ustensils\": [\"cuillère à Soupe\", \"verres\", \"presse citron\" ]\n    },\n    {\n        \"id\": 2,\n        \"image\": \"Recette02.jpg\",\n        \"name\" : \"Poisson Cru à la tahitienne\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\" : \"Thon Rouge (ou blanc)\",\n                \"quantity\" : 200,\n                \"unit\" : \"grammes\"\n            },\n            {\n                \"ingredient\" : \"Concombre\",\n                \"quantity\" : 1\n            },\n            {\n                \"ingredient\" : \"Tomate\",\n                \"quantity\" : 2\n            },\n            {\n                \"ingredient\" : \"Carotte\",\n                \"quantity\" : 1\n            },\n            {\n                \"ingredient\" : \"Citron Vert\",\n                \"quantity\" : 5\n            },\n            {\n                \"ingredient\" : \"Lait de Coco\",\n                \"quantity\" : 100,\n                \"unit\" : \"ml\"\n            }\n        ],\n        \"time\": 60,\n        \"description\": \"Découper le thon en dés, mettre dans un plat et recouvrir de jus de citron vert (mieux vaut prendre un plat large et peu profond). Laisser reposer au réfrigérateur au moins 2 heures. (Si possible faites-le le soir pour le lendemain. Après avoir laissé mariner le poisson, coupez le concombre en fines rondelles sans la peau et les tomates en prenant soin de retirer les pépins. Rayer la carotte. Ajouter les légumes au poissons avec le citron cette fois ci dans un Saladier. Ajouter le lait de coco. Pour ajouter un peu plus de saveur vous pouvez ajouter 1 à 2 cuillères à soupe de Crème de coco\",\n        \"appliance\": \"Saladier\",\n        \"ustensils\": [\"presse citron\"]\n    },{\n        \"id\": 3,\n        \"image\": \"Recette03.jpg\",\n        \"name\": \"Poulet coco réunionnais\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Poulet\",\n                \"quantity\" : 1          \n            },\n            {\n                \"ingredient\": \"Lait de coco\",\n                \"quantity\" : 400,\n                \"unit\" : \"ml\"\n            },\n            {\n                \"ingredient\": \"Coulis de tomate\",\n                \"quantity\" : 25,\n                \"unit\" : \"cl\"\n            },\n            {\n                \"ingredient\": \"Oignon\",\n                \"quantity\" : 1\n            },\n            {\n                \"ingredient\": \"Poivron rouge\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Huile d'olive\",\n                \"quantity\": 1,\n               \"unit\": \"cuillères à soupe\"\n            }\n        ],\n        \"time\": 80,\n        \"description\": \"Découper le poulet en morceaux, les faire dorer dans une cocotte avec de l'huile d'olive. Salez et poivrez. Une fois doré, laisser cuire en ajoutant de l'eau. Au bout de 30 minutes, ajouter le coulis de tomate, le lait de coco ainsi que le poivron et l'oignon découpés en morceaux. Laisser cuisiner 30 minutes de plus. Servir avec du riz\",\n        \"appliance\": \"Cocotte\",\n        \"ustensils\": [\"couteau\"]\n    },{\n        \"id\": 4,\n        \"image\": \"Recette04.jpg\",\n        \"name\": \"Salade de riz\",\n        \"servings\": 4,\n        \"ingredients\":[\n            {\n                \"ingredient\": \"Riz blanc\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Thon en miettes\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },{\n                \"ingredient\": \"Tomate\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Oeuf dur\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Maïs\",\n                \"quantity\": 300,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Vinaigrette\",\n                \"quantity\": 5,\n                \"unit\": \"cl\"\n            }\n        ],\n        \"time\": 50,\n        \"description\": \"Faire cuire le riz. Une fois le riz cuit, le laisser refroidir. Couper les oeufs dur en quarts ou en lamelle au choix, coupez le tomates en dés, ajouter au riz les oeufs, les tomates, le poisson, le maïs et la vinaigrette. Ajouter au gout de chacun des corniches, olives etc..\",\n        \"appliance\": \"Cuiseur de riz\",\n        \"ustensils\": [\"saladier\", \"passoire\"]\n    },\n    {\n        \"id\": 5,\n        \"image\": \"Recette05.jpg\",\n        \"name\": \"Tarte au thon\",\n        \"servings\": 4,\n        \"ingredients\":[\n           {\n               \"ingredient\": \"Pâte feuilletée\",\n               \"quantity\": 1 \n           },\n           {\n               \"ingredient\": \"Thon en miettes\",\n               \"quantity\": 130,\n               \"unit\": \"grammes\"\n           },\n           {\n                \"ingredient\": \"Tomate\",\n                \"quantity\": 2\n           },\n           {\n               \"ingredient\": \"Crème fraîche\",\n               \"quantity\": 2,\n               \"unit\": \"cuillères à soupe\"\n           },\n           {\n               \"ingredient\": \"gruyère râpé\",\n               \"quantity\": 100,\n               \"unit\": \"grammes\"\n           },\n           {\n                \"ingredient\": \"Moutarde de Dijon\",\n                \"quantity\": 1,\n                \"unite\": \"cuillères à soupe\"\n           }\n        ],\n        \"time\": 45,\n        \"description\": \"Étaler la pâte feuilleté aux dimensions du moule, étaler la moutarde sur la pâte feuilleté, ajouter le thon. Découper les tomates en rondelles et les poser sur le poisson, ajouter un peu de crème fraîche sur toute la tarte et recouvrez de gruyère râpé. Cuire au four 30 minutes\",\n        \"appliance\":\"Four\",\n        \"ustensils\": [\"moule à tarte\", \"râpe à fromage\", \"couteau\"]\n    },\n    {\n        \"id\": 6,\n        \"image\": \"Recette06.jpg\",\n        \"name\": \"Tarte aux pommes\",\n        \"servings\": 6,\n        \"ingredients\":[\n            {\n                \"ingredient\": \"Pâte brisée\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Pomme\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": \"2\"\n            },\n            {\n                \"ingredient\":\"Crème fraîche\",\n                \"quantity\":25,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Sucre en Poudre\",\n                \"quantity\": 100,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre vanillé\",\n                \"quantity\": 1,\n                \"unit\": \"sachets\"\n\n            }\n        ],\n        \"time\": 50,\n        \"description\": \"Commencez par mélanger les oeufs le sucre et le sucre vanillé dans un saladier, découper les pommes en tranches, ajouter la crème fraîche aux oeufs. Une fois que tout est pret, étalez la tarte dans le moule. N'oubliez pas de piquer le fond avec une fourchette avant de positionner les pommes sur la tarte. Finalement verser la préparation à base d'oeufs et de crème fraîche. Laisser cuire au four pendant 30 minutes\",\n        \"appliance\": \"Four\",\n        \"ustensils\": [\"moule à tarte\", \"saladier\", \"fourchette\"]\n    },{\n        \"id\": 7,\n        \"image\": \"Recette07.jpg\",\n        \"name\": \"Tartelettes au chocolat et aux fraises\",\n        \"servings\": 6,\n        \"ingredients\":[\n            {\n                \"ingredient\": \"Pâte sablée\",\n                \"quantity\": 1\n            }, \n            {\n                \"ingredient\": \"Chocolat au lait\",\n                \"quantity\": 300,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Crème liquide\",\n                \"quantity\": 80,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": \"30\",\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Fraise\",\n                \"quantity\": 6\n            }\n        ],\n        \"time\": 50,\n        \"description\": \"Étaler la pate dans les moules à tartelette. Faire cuire la pate 30 minutes. Découper le chocolat en morceau et le faire chauffer, y ajouter la crème liquide, ajouter le beurre et remuer jusqu'à avoir une pâte homogène. Verser la pate sur les tartelettes. Couper les fraises en 2 et les positionner sur \",\n        \"appliance\":\"Four\",\n        \"ustensils\":[\"moule à tartelettes (6)\", \"casserole\"]\n    }, {\n        \"id\": 8,\n        \"image\": \"Recette08.jpg\",\n        \"name\": \"Brownie\",\n        \"servings\": 10,\n        \"ingredients\":[\n           {\n                \"ingredient\": \"Noix\",\n                \"quantity\": \"180\",\n                \"unit\": \"grammes\"\n           },\n           {\n               \"ingredient\": \"Chocolat noir\",\n               \"quantity\": 150,\n               \"unit\": \"grammes\"\n           },\n           {\n               \"ingredient\": \"Beurre\",\n               \"quantity\": 120,\n               \"unit\": \"grammes\"\n           },\n           {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 2\n           },\n           {\n               \"ingredient\": \"Sucre en Poudre\",\n               \"quantity\": \"110\",\n               \"unit\": \"grammes\"\n           },\n           {\n                \"ingredient\": \"farine\",\n                \"quantity\": 90,\n                \"unit\": \"grammes\"\n           }\n\n        ], \n        \"time\": 60,\n        \"description\": \"Hachez les noix grossièrement. Faire fondre le chocolat avec le beurre. Mélanger les oeufs et le sucre et mélanger au chocolat. Ajouter la farine. Mélanger afin d'avoir quelque chose d'homogène puis incorporer les noix. Verser la préparation dans un moule de préférence rectangulaire. Cuire 2O à 25 minutes à 180°. Sortez du four et attendez quelques minutes pour démouler. Servir avec une boule de glace pour plus de gourmandise.\",\n        \"appliance\": \"Four\",\n        \"ustensils\": [\"moule à gateaux\", \"casserole\"]\n    },\n    {\n        \"id\": 9,\n        \"image\": \"Recette09.jpg\",\n        \"name\": \"Salade Méditerannéene fraîche au chèvre\",\n        \"servings\": 4,\n        \"ingredients\":[\n            {\n                \"ingredient\": \"Concombre\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Olives\"\n            },\n            {\n                \"ingredient\": \"Fromage de chèvre\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Vinaigre Balsamic\"\n            },\n            {\n                \"ingredient\": \"Huile d'olive\"\n            }, \n            {\n                \"ingredient\": \"Basilic\"    \n            }\n        ],\n        \"time\": 15,\n        \"description\":\"Peler le concombre le couper 2, retirer les pépins. Couper les olives en morceaux, ainsi que le fromage de chèvre. Ajouter le basilic ainsi que le vinaigre balsamic et l'huile d'olives à votre gout.\",\n        \"appliance\":\"Saladier\",\n        \"ustensils\":[\"cuillère en bois\", \"couteau\"]\n    },\n    {\n        \"id\": 10,\n        \"image\": \"Recette10.jpg\",\n        \"name\": \"Tartiflette\",\n        \"servings\": 4,\n        \"ingredients\":[\n            {\n                \"ingredient\": \"Reblochon\",\n                \"quantity\": \"1\"\n            },\n            {\n                \"ingredient\": \"Pommes de terre\",\n                \"quantity\": 4.5,\n                \"unit\": \"kg\"\n            },\n            {\n                \"ingredient\": \"Jambon fumé\",\n                \"quantity\": 2,\n                \"unit\": \"tranches\"\n            },\n            {\n                \"ingredient\": \"Oignon\",\n                \"quantity\": 300,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Vin blanc sec\",\n                \"quantity\": 30,\n                \"unit\": \"cl\"\n            }\n        ],\n        \"time\": 60,\n        \"description\": \"Commencer par cuire les pommes de terre dans l'eau bouillante. Puis épluchez les et coupez les en rondelles. Émincer les oignons puis les faire dorer dans du beurre. Ajouter le jambon fumé coupé en en morceaux ainsi que les pommes de terres. Salez, poivrez à votre gout ( et celui de vos convives ) Laissez cuisiner durant environ 10 minutes puis ajouter le vin blanc. Après 5 minutes, mettre le tout dans un plat à gratin. Coupez le reblochon, soit en tranches, soit le couper en 2 dans le sens de l'épaisseur et recouvrir les pommes de terre. Cuire au four (environ 220°) durant 25 minutes. C'est prêt !\",\n        \"appliance\":\"Four\",\n        \"ustensils\": [\"plat à gratin\", \"couteau\",\"Économe\"]\n    },{\n        \"id\": 11,\n        \"image\": \"Recette11.jpg\",\n        \"name\": \"Salade tomate, mozzarella et pommes\",\n        \"servings\": 4,\n        \"ingredients\":[\n            {\n                \"ingredient\": \"Tomates cerises\",\n                \"quantity\": 250,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Mozzarella\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Jambon de parme\",\n                \"quantity\": 4,\n                \"unit\": \"tranches\"\n            }, \n            {\n                \"ingredient\": \"Pommes\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Salade Verte\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Vinaigrette\",\n                \"quantity\": 5,\n                \"unit\": \"cl\"\n            }\n        ],\n        \"time\": 10,\n        \"description\": \"Commencer par couper les feuilles de salade, ajouter les tomates cerises et le fromage découpé en cubes ou en boules avec la cuillère à melon. Découper le jambon de parme en fines lamelles. Ajouter la pomme elle aussi découpée en petit morceaux. Assaisonnez à votre gout. \",\n        \"appliance\": \"Saladier\",\n        \"ustensils\": [\"couteau\", \"cuillère à melon\" ]\n    },{\n        \"id\": 12,\n        \"image\": \"Recette12.jpg\",\n        \"name\": \"Compote pomme rhubarbe\",\n        \"servings\": 4,\n        \"ingredients\":[\n            {\n                \"ingredient\": \"Rhubarbe\",\n                \"quantity\": 160,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Pommes\",\n                \"quantity\": 8\n            },\n            {\n                \"ingredient\": \"Sucre vanillé\",\n                \"quantity\": 6,\n                \"unit\": \"sachets\"\n            },\n            {\n                \"ingredient\": \"Eau\",\n                \"quantity\" : \"0.5\",\n                \"unit\" : \"tasses\"\n            }\n        ],\n        \"time\": 40,\n        \"description\": \"Éplucher les fruits et les couper en morceaux, les mettre dans une casserole en ajoutant l'eau et le sucre vanillé. Laisser cuire 15 minutes en remuant régulièrement.\",\n        \"appliance\": \"Casserole\",\n        \"ustensils\": [\"couteau\", \"économe\"]\n    },\n    {\n        \"id\": 13,\n        \"image\": \"Recette13.jpg\",\n        \"name\": \"Salade mâchée de patates\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Mâche\",\n                \"quantity\": 60,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Pommes de terre\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Échalote\",\n                \"quantity\": 2\n\n            },\n            {\n                \"ingredient\": \"Vinaigre de cidre\",\n                \"quantity\": 1,\n                \"unit\":\"cuillère à soupe\"\n            },\n            {\n                \"ingredient\": \"huile d'olive\",\n                \"quantity\": 2,\n                \"unit\": \"cuillère à soupe\"\n            }\n        ],\n        \"time\":40,\n        \"description\":\"Cuire les pommes de terre environ 30 minutes. Découper les échalotes finement. Durant la cuisson des pommes de terre. Préparez la vinaigrette avec l'huile d'olive et le vinaigre de cidre. Salez poivrez à discrétion. Dans un saladier, mettre le mâche. Ajouter\",\n        \"appliance\": \"Casserole\",\n        \"ustensils\":[\"couteau\",\"saladier\",\"cuillère en bois\"]\n    },\n    {\n        \"id\": 14,\n        \"image\": \"Recette14.jpg\",\n        \"name\": \"Galette Bretonne Saucisse et Fromage à raclette\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Saucisse bretonne ou de Toulouse\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Farine de blé noir\",\n                \"quantity\": 130,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 1\n\n            },\n            {\n                \"ingredient\": \"Fromage à raclette\",\n                \"quantity\": 300,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Oignon\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 75,\n                \"unit\": \"grammes\"\n            }\n\n        ],\n        \"time\": 100,\n        \"description\":\"Mélanger la farine et les oeufs, faire fondre 25 grammes de beurre et ajouter à la pâte. Ajouter du sel. Laisser reposer 1 heure. Faire les galettes et laisser refroidir. Faire chauffer les saucisses avec du beurre et l'oignon. Enrouler les saucisses dans les crêpes avec une partie du fromage. Mettre le reste du fromage à raclette par dessus les crêpes. Passer four pendant 20 minutes\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"poêle à frire\",\"couteau\"]\n    },\n    {\n        \"id\": 15,\n        \"image\": \"Recette15.jpg\",\n        \"name\": \"Crêpes Chocolat Banane\",\n        \"servings\": 10,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Farine\",\n                \"quantity\": 250,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 600,\n                \"unit\": \"ml\"\n            },\n            {\n                \"ingredient\": \"Beurre salé\",\n                \"quantity\": 30,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Chocolat au lait\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Banane\",\n                \"quantity\": 4\n            }\n        ],\n        \"time\": 60,\n        \"description\":\"Mélangez dans un saladier, la farine, les oeufs, et le lait. Battez jusqu'à avoir une masse homogène. Pendant ce temps faites fondre le beurre et ajoutez en une partie à la pâte à crêpes. Faire fondre le chocolat ( avec le reste du beurre salé ). Lorsque vous chauffez les crêpes. Ajouter le chocolat fondu et les bananes coupées en rondelles. Ajoutez une touche de chantilly pour les gourmands\",\n        \"appliance\": \"Poêle à crêpe\",\n        \"ustensils\":[\"saladier\", \"louche\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 16,\n        \"image\": \"Recette16.jpg\",\n        \"name\": \"Gratin de pâtes à la tomate\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Tomate\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Mozzarella\",\n                \"quantity\": 250,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Pennes\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Basilic\",\n                \"quantity\": 1,\n                \"unit\":\"tiges\"\n            },\n            {\n                \"ingredient\": \"huile d'olives\",\n                \"quantity\": 2,\n                \"unit\": \"cuillère à soupe\"\n            }\n        ],\n        \"time\": 45,\n        \"description\":\"Faire cuire les pâtes si vous n'avez pas de pennes des coquillettes peuvent faire l'affaire. Découper les tomates en petits morceaux, soit en tranches soit en dés. Coupez le basilic en petites morceaux et mélangez le aux tomates.  Coupez la mozzarella en tranche. Préchauffez le four à 200°. Alternez entre couches de pattes et couches de tomates, terminez par une couche de pates et recouvrir du fromage. Laisser au four 30 minutes et régalez vous ! Une recette simple qui fera plaisir au petits comme aux grands.\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"plat à gratin\", \"couteau\", \"râpe à fromage\"]\n    },\n    {\n        \"id\": 17,\n        \"image\": \"Recette17.jpg\",\n        \"name\": \"Smoothie à la fraise\",\n        \"servings\": 6,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Fraise\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Pastèque\",\n                \"quantity\": 0.5\n            },\n            {\n                \"ingredient\": \"Jus de citron\",\n                \"quantity\": 1,\n                \"unit\":\"cuillères à soupe\"\n            },\n            {\n                \"ingredient\": \"Glaçons\",\n                \"quantity\": 8\n            },\n            {\n                \"ingredient\": \"Menthe\"\n            }\n        ],\n        \"time\": 15,\n        \"description\":\"Coupez les fraises en morceaux, découpez la chaire de la pastèque en retirant les pépins. Mettre le tout dans le blender. Ajouter un cuillère à soupe de juste de citron ainsi que les glaçons. Ajoutez quelques feuilles de menthe pour plus de fraîcheur. Mixez le tout. Servir et déguster.\",\n        \"appliance\": \"Blender\",\n        \"ustensils\":[\"verres\", \"couteau\", \"presse citron\"]\n    },\n    {\n        \"id\": 18,\n        \"image\": \"Recette18.jpg\",\n        \"name\": \"Smoothie ananas et vanille\",\n        \"servings\": 5,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Ananas\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Glace à la vanille\",\n                \"quantity\": 500,\n                \"unit\": \"ml\"\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 50,\n                \"unit\": \"cl\"\n            }\n        ],\n        \"time\": 10,\n        \"description\":\"Séparez 1/5ème d'Ananas ( une belle tranche qui servira pour la décoration des verres ), mettre le reste coupé en cubes au blender, ajouter la glace à la vanille et le lait. Mixez. Servir et décorer avec l'ananas restant. C'est prêt\",\n        \"appliance\": \"Blender\",\n        \"ustensils\":[\"verres\", \"couteau\"]\n    },\n    {\n        \"id\": 19,\n        \"image\": \"Recette19.jpg\",\n        \"name\": \"Shake Banane Kiwi\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Kiwi\",\n                \"quantity\": 4\n            },\n            {\n                \"ingredient\": \"Citron\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 1,\n                \"unit\": \"litres\"\n            },\n            {\n                \"ingredient\": \"Sucre glace\",\n                \"quantity\": 30,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Banane\",\n                \"quantity\": 1\n            }\n        ],\n        \"time\": 0,\n        \"description\":\"Coupez les fruits en morceaux, ajouter le jus de citron et le lait ainsi que le sucre glace. Mixez. Ajoutez des glaçons si le lait n'a pas été mis au frais.\",\n        \"appliance\": \"Blender\",\n        \"ustensils\":[\"couteau\", \"verres\", \"presse citron\"]\n    },\n    {\n        \"id\": 20,\n        \"image\": \"Recette20.jpg\",\n        \"name\": \"Pates Carbonara\",\n        \"servings\": 5,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Tagliatelles\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Lardons\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Crème fraîche\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Parmesan\",\n                \"quantity\": 100,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"huile d'olive\",\n                \"quantity\": 1,\n                \"unit\": \"cuillères à soupe\"\n            }\n        ],\n        \"time\": 30,\n        \"description\":\"Faire cuire les pates comme indiqué sur le paquet. Dorer les lardons dans une sauteuse avec l'huile d'olive. Ajouter la crème fraîche et baisser le feu au minimum. Quand les Tagliatelles sont prêtes les mettre dans la sauteuse et bien mélanger le tout en ajoutant le jaune d'oeuf. Servir et ajouter le parmesan râpé.\",\n        \"appliance\": \"Sauteuse\",\n        \"ustensils\":[\"râpe à fromage\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 21,\n        \"image\": \"Recette21.jpg\",\n        \"name\": \"Spaghettis à la bolognaise\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Spaghettis\",\n                \"quantity\": 400,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oignon\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Coulis de tomate\",\n                \"quantity\": 300,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Viande hachée 1% de matière grasse\",\n                \"quantity\": 400,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Vin rouge\",\n                \"quantity\": 20,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Crème fraîche\",\n                \"quantity\" : 1,\n                \"unit\": \"cuillères à soupe\"\n            }\n        ],\n        \"time\": 30,\n        \"description\":\"Cuisiner la viande hachée dans une poêle à frire. Dans une autre faire cuire les oignons découpés en fins dés avec un peu de beurre. Ajouter du vin rouge. Mélanger les oignons avec la viande hachée. Faire cuire les pates le temps indiqué sur le paquet. Ajouter le coulis de tomates à la viande hachée. Une fois que les pates sont cuites, ajouter la crème fraîche à la viande hachée. Servir.\",\n        \"appliance\": \"Casserole\",\n        \"ustensils\":[\"Cuillère en bois\", \"louche\", \"couteau\"]\n    },\n    {\n        \"id\": 22,\n        \"image\": \"Recette22.jpg\",\n        \"name\": \"Fondant au chocolat\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 160,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Chocolat noir\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Farine\",\n                \"quantity\": 50,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 4\n            },\n            {\n                \"ingredient\": \"Sucre\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            }\n        ],\n        \"time\": 30,\n        \"description\":\"Faire fondre le chocolat et le beurre au bain marie. Dans un saladier battre les oeufs avec le sucre jusqu'à obtenir une texture de type mousse. Ajouter la farine ainsi que le mélange de beurre et chocolat fondu. Beurrez le moule à gateaux. Mettre au four préchauffé à 200° puis faites chauffer pendant 15 minutes. C'est prêt. Servir avec une boule de glace ou une crème dessert.\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"moule à gateaux\", \"fouet\", \"casserole\"]\n    },\n    {\n        \"id\": 23,\n        \"image\": \"Recette23.jpg\",\n        \"name\": \"Quiche lorraine\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pâte brisée\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Lardons\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 30,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Crème Fraîche\",\n                \"quantity\": 20,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 20,\n                \"unit\": \"cl\"\n            }\n        ],\n        \"time\": 60,\n        \"description\":\"Étaler la pate dans un moule et la piquer.Parsemer de beurre. Faire chauffer les lardon dans une poêle. Battre les oeufs en ajoutant la crème fraîche et le lait. Finalement ajouter les lardons, salez poivrez à votre gout. Verser l'ensemble sur la pâte. Cuire environ 50 minutes.\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"moule à gateaux\", \"rouleau à patisserie\", \"fouet\"]\n    },\n    {\n        \"id\": 24,\n        \"image\": \"Recette24.jpg\",\n        \"name\": \"Salade de pâtes\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Thon en miettes\",\n                \"quantity\": 160,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Maïs\",\n                \"quantity\": 60,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Tomate\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Concombre\",\n                \"quantity\": 0.5\n            },\n            {\n                \"ingredient\": \"Macaronis\",\n                \"quantity\": 300,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Mayonnaise\",\n                \"quantity\": 2,\n                \"unit\": \"cuillères à soupe\"\n            }\n        ],\n        \"time\": 40,\n        \"description\":\"Découper le concombre et les tomates en dés, les mettre dans un saladier avec le mais et les miettes de poisson, ajouter les pates. Ajouter la mayonnaise. Mélanger le tout et servir frais.\",\n        \"appliance\": \"Saladier\",\n        \"ustensils\":[\"couteau\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 25,\n        \"image\": \"Recette25.jpg\",\n        \"name\": \"Cookies\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Sucre\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Farine\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Chocolat noir en pépites\",\n                \"quantity\": 100,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 1\n            }\n        ],\n        \"time\": 30,\n        \"description\":\"Faire fondre le beurre et le mélanger avec le sucre. Finalement ajouter l'oeuf. Ajouter la farine tout en mélangeant peu pa peu pour avoir une masse sans grumeaux. Ajouter les pépites de chocolat. Faire, une plaque de cuisson de petites boules pour les cookies. Mettre au four à 180° pour 10 minutes.\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"fouet\", \"saladier\", \"plaque de cuisson\"]\n    },\n    {\n        \"id\": 26,\n        \"image\": \"Recette26.jpg\",\n        \"name\": \"Soupe de tomates\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Tomate\",\n                \"quantity\": 6\n            },\n            {\n                \"ingredient\": \"Pommes de terre\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Huile d'olives\"\n            },\n            {\n                \"ingredient\": \"Oignon\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Ail\",\n                \"quantity\": 1,\n                \"unit\": \"gousses\"\n            }\n        ],\n        \"time\": 25,\n        \"description\":\"Verser de l'huile dans une cocotte minute couper les légumes et les verser dans l'huile chaude. Laisser cuire et remuer pendant 10 minutes. Passer aux mixer. Servir.\",\n        \"appliance\": \"Mixer\",\n        \"ustensils\":[\"cocotte minute\", \"couteau\"]\n    },\n    {\n        \"id\": 27,\n        \"image\": \"Recette27.jpg\",\n        \"name\": \"Soupe à l'oseille\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Oseille\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Crème fraîche\",\n                \"quantity\": 4,\n                \"unit\": \"cuillère à soupe\"\n            },\n            {\n                \"ingredient\": \"Vermicelles\",\n                \"quantity\": 1,\n                \"unit\":\"verres\"\n            },\n            {\n                \"ingredient\": \"Beurre salé\",\n                \"quantity\": 50,\n                \"unit\": \"grammes\"\n            }\n        ],\n        \"time\": 15,\n        \"description\":\"Faire fondre l'oseille avec du beurre demi sel, ajouter un litre d'eau. Ajouter les vermicelles. Laisser cuire. une fois prêt, sortir du feu et après 5 minutes ajouter le jaune d'oeuf et la crème fraîche\",\n        \"appliance\": \"Casserole\",\n        \"ustensils\":[\"couteau\",\"cuillère en bois\"]\n    },\n    {\n        \"id\": 28,\n        \"image\": \"Recette28.jpg\",\n        \"name\": \"Soupe de poireaux\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Poireau\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Pommes de terre\",\n                \"quantity\": 400,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oseille\",\n                \"quantity\": 75,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 50,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Crème fraîche\",\n                \"quantity\": 10,\n                \"unit\": \"cl\"\n            }\n        ],\n        \"time\": 80,\n        \"description\":\"Émincer les blanc de poireaux et les faire chauffer dans 25 grammes de beurre. AJouter les pommes de terres coupées en morceaux. Ajouter l'eau et laisser mijoter pour 45 minutes. Chauffer l'oseille avec le beurre restant puis incorporer le tout. Mixez. Ajoutez la crème. Bon appetit.\",\n        \"appliance\": \"Mixer\",\n        \"ustensils\":[\"casserole\",\"couteau\"]\n    },\n    {\n        \"id\": 29,\n        \"image\": \"Recette29.jpg\",\n        \"name\": \"Houmous Express\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pois chiches\",\n                \"quantity\": 1,\n                \"unit\": \"boites\"\n            },\n            {\n                \"ingredient\": \"Ail\",\n                \"quantity\": 1,\n                \"unit\": \"gousses\"\n            },\n            {\n                \"ingredient\": \"Citron\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Huile d'olive\"\n            },\n            {\n                \"ingredient\": \"Paprika\"\n            }\n        ],\n        \"time\": 30,\n        \"description\":\"Prendre les pois chiches, les mettre dans le mixer avec de l'huile d'olive, ajouter le jus des 2 citrons et du paprika selon le gout.\",\n        \"appliance\": \"Mixer\",\n        \"ustensils\":[\"cuillère en bois\", \"presse citron\"]\n    },\n    {\n        \"id\": 30,\n        \"image\": \"Recette30.jpg\",\n        \"name\": \"Purée de pois cassés\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pois Cassé\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oignon\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Ail\",\n                \"quantity\": 2,\n                \"unit\": \"gousses\"\n            }\n        ],\n        \"time\": 60,\n        \"description\":\"Mettre tous les ingrédients dans une cocotte. ajouter de l'eau pour recouvrir l'ensemble et laisser cuire à petit feu pour 1 heure. Passer au mixer. Salez, poivrez. C'est prêt\",\n        \"appliance\": \"Mixer\",\n        \"ustensils\":[\"casserole\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 31,\n        \"image\": \"Recette31.jpg\",\n        \"name\": \"Jardinière de légumes\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Carotte\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Pommes de terre\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Haricots verts\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Petits poids\",\n                \"quantity\": 100,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Lardons\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            }\n        ],\n        \"time\": 60,\n        \"description\":\"Découper en cubes les carottes et pommes de terre. Faire revenir dans du beurre. Ajouter les lardons, une fois les lardons dorés, ajouter un grand verre d'eau. Ajouter les petit poids et les haricots verts ( tous deux pré cuits ). Ajouter Sel, poivre, thyms et laurier\",\n        \"appliance\": \"Poêle\",\n        \"ustensils\":[\"Couteau\", \"économe\"]\n    },\n    {\n        \"id\": 32,\n        \"image\": \"Recette32.jpg\",\n        \"name\": \"Croque Monsieur à la dinde\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pain de mie\",\n                \"quantity\": 8,\n                \"unit\": \"tranches\"\n            },\n            {\n                \"ingredient\": \"Blanc de dinde\",\n                \"quantity\": 4,\n                \"unit\": \"tranches\"\n            },\n            {\n                \"ingredient\": \"Emmental\",\n                \"quantity\": 8,\n                \"unit\": \"tranches\"\n            },\n            {\n                \"ingredient\": \"Gruyère\",\n                \"quantity\": 100,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 5,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Noix de muscade\",\n                \"quantity\": 1,\n                \"unit\": \"pincées\"\n            }\n        ],\n        \"time\": 20,\n        \"description\":\"Beurrer les tranches de pain, ajouter entre 2 tranches de pain de mie 1 tranche d’emmental, une de blanc de dinde, et une autre d'emmental. Dans un récipient, mélanger le gruyère rappé avec le lait et la noix de muscade. Mettre sur les croque monsieur. Placer au four durant 10 minutes.\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"râpe à fromage\", \"cuillère à Soupe\", \"couteau\"]\n    },\n    {\n        \"id\": 33,\n        \"image\": \"Recette33.jpg\",\n        \"name\": \"Sandwich au saumon fumé\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pain de mie\",\n                \"quantity\": 8,\n                \"unit\": \"tranches\"\n            },\n            {\n                \"ingredient\": \"Saumon Fumé\",\n                \"quantity\": 4,\n                \"unit\": \"tranches\"\n            },\n            {\n                \"ingredient\": \"Feuilles de laitue\",\n                \"quantity\": 4\n            },\n            {\n                \"ingredient\": \"Fromage blanc\",\n                \"quantity\": 4,\n                \"unit\":\"cuillères à soupe\"\n            },\n            {\n                \"ingredient\": \"Jus de citron\",\n                \"quantity\": 1,\n                \"unit\": \"cuillères à soupe\"\n            }\n        ],\n        \"time\": 5,\n        \"description\":\"Mélanger le fromage blanc avec le citron. Ajouter un peu de sel et poivre à votre gout. Faire dorer le pain de mie. Puis étaler le mélange. Ajouter une feuille de salade puis le saumon fumé. C'est prêt.\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"couteau\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 34,\n        \"image\": \"Recette34.jpg\",\n        \"name\": \"Purée de patate douce\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Patate douce\",\n                \"quantity\": 800,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Crème fraîche\",\n                \"quantity\": 20,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Huile d'olive\"\n            },\n            {\n                \"ingredient\": \"Orange\",\n                \"quantity\": 1\n            }\n        ],\n        \"time\": 25,\n        \"description\":\"Éplucher les patates douces et coupez les en morceaux. Les faire cuire durant 20 minute dans une casserole d'eau bouillante. Passer au mixer en ajoutant la crème et l'huile d'olive à son gout. Salez, poivrez. Pressez l'orange et ajouter le jus à l'ensemble. Servir.\",\n        \"appliance\": \"Mixer\",\n        \"ustensils\":[\"couteau\", \"économe\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 35,\n        \"image\": \"Recette35.jpg\",\n        \"name\": \"Purée de carottes\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Carotte\",\n                \"quantity\": 6\n            },\n            {\n                \"ingredient\": \"Pommes de terre\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 20,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Crème fraîche\",\n                \"quantity\": 2,\n                \"unit\":\"cuillères à soupe\"\n            },\n            {\n                \"ingredient\": \"Cumin\",\n                \"quantity\": 1,\n                \"unit\": \"cuillères à café\"\n            },\n            {\n                \"ingredient\": \"Noix de muscade\",\n                \"quantity\": 1,\n                \"unit\": \"pincées\"\n            }\n        ],\n        \"time\": 25,\n        \"description\":\"Éplucher les légumes, les couper en morceaux et les mettre à cuire dans une cocotte minute environ 15 minutes. Mixer en ajoutant le beurre, la crème. Ajouter le cumin et la noix de muscade.\",\n        \"appliance\": \"Mixer\",\n        \"ustensils\":[\"cocotte minute\", \"couteau\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 36,\n        \"image\": \"Recette36.jpg\",\n        \"name\": \"Lasagne Courgettes et Chèvre\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Courgette\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Fromage de chèvre\",\n                \"quantity\": 4\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 25,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Lasagnes\",\n                \"quantity\": 5,\n                \"unit\":\"feuilles\"\n            },\n            {\n                \"ingredient\": \"Gruyère\",\n                \"quantity\": 40,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Maïzena\",\n                \"quantity\": 1,\n                \"unit\": \"cuillères à soupe\"\n            }\n        ],\n        \"time\": 35,\n        \"description\":\"Raper les courgette et les faire revenir durant 15 minutes. Ajouter les fromages de chèvre frais. Préparer la béchamel avec le lait et la maïzena. Salez poivrez, ajouter de la noix de muscade selon les gouts. Dans un plat, mettre un peu de sauces au fond, puis des lasagnes, puis des courgettes etc... terminer par de la sauces et ajouter le gruyère. Passer au four à 180° durant 20 à 25 minutes.\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"plat à gratin\", \"râpe à fromage\", \"fouet\"]\n    },\n    {\n        \"id\": 37,\n        \"image\": \"Recette37.jpg\",\n        \"name\": \"Courgettes farcies au boeuf\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Courgette\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Viande hachée\",\n                \"quantity\": 600,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Huile d'olives\",\n                \"quantity\": 25,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Oignon\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Coulis de tomates\",\n                \"quantity\": 20,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Gruyère\",\n                \"quantity\": 50,\n                \"unit\": \"grammes\"\n            }\n            \n        ],\n        \"time\": 60,\n        \"description\":\"Couper les courgettes dans le sens de la longueur. Vider les courgette dans un saladier. Réserver.Faire revenir la chair des courgettes dans 25cl d'huile d'olive. Ajouter l'oignon puis la viande hachée. Mettre la farce dans les courgettes. Ajouter le coulis de tomates. Mettre au four pendant 30 minutes. Avant la fin de la cuisson ajouter le fromage râpé\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"couteau\", \"cuillère en bois\", \"Poêle à frire\"]\n    },\n    {\n        \"id\": 38,\n        \"image\": \"Recette38.jpg\",\n        \"name\": \"Pain Perdu\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pain\",\n                \"quantity\": 6,\n                \"unit\":\"tranches\"\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 25,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Sucre roux\",\n                \"quantity\": 75,\n                \"unit\": \"grammes\"\n            }\n        ],\n        \"time\": 20,\n        \"description\":\"Fouettez les oeufs, le sucre et le lait. tremper les tranches de pain. Le cuire au four pendant environ 10 minutes à 180°. Servir\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"fouet\", \"bol\",\"Cuillère à Soupe\"]\n    },\n    {\n        \"id\": 39,\n        \"image\": \"Recette39.jpg\",\n        \"name\": \"Crumble aux pommes\",\n        \"servings\": 40,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pomme\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Farine\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 50,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre roux\",\n                \"quantity\": 80,\n                \"unit\":\"grammes\"\n            }\n        ],\n        \"time\": 40,\n        \"description\":\"Découper les pommes en dé. Mélanger dans un saladier la farine, le sucre et le beurre. Bien mélanger. Beurrer le moule et ajouter les pommes. Par dessus placez la pate que vous avez obtenu. Cuire 20 minutes au four\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"saladier\", \"couteau\",\"fouet\"]\n    },\n    {\n        \"id\": 40,\n        \"image\": \"Recette40.jpg\",\n        \"name\": \"Limonade\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Eau\",\n                \"quantity\": 1,\n                \"unit\": \"Litres\"\n            },\n            {\n                \"ingredient\": \"Citron Vert\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Sucre en poudre\",\n                \"quantity\": 4,\n                \"unit\":\"cuillères à café\"\n            },\n            {\n                \"ingredient\": \"Bicarbonate\",\n                \"quantity\": 1,\n                \"unit\": \"cuillères à café\"\n            }\n        ],\n        \"time\": 10,\n        \"description\":\"Dans un saladier mettre l'eau, le jus des citrons et le sucre. Bien mélanger. Ajouter le bicarbonate. Servir. Ajouter des glaçon et une feuille de menthe pour la déco.\",\n        \"appliance\": \"Saladier\",\n        \"ustensils\":[\"cuillère en bois\"]\n    },\n    {\n        \"id\": 41,\n        \"image\": \"Recette41.jpg\",\n        \"name\": \"Mousse au chocolat\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Chocolat noir\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre vanillé\",\n                \"quantity\": 1,\n                \"unit\": \"sachets\"\n            }\n        ],\n        \"time\": 20,\n        \"description\":\"Séparer les blancs d'oeufs. Faire fondre le chocolat au bain marie. Ajouter les jaunes et le sucre au chocolat hors du feu. Battre les blancs en neige. Ajouter les blancs au mélange de chocolat. Mélangez délicatement avec une spatule. Servir dans un plat ou dans des verres. Mettre au frais\",\n        \"appliance\": \"Casserole\",\n        \"ustensils\":[\"fouet\", \"spatule\", \"verres\"]\n    }, \n    {\n        \"id\": 42,\n        \"image\": \"Recette42.jpg\",\n        \"name\": \"Charlotte au poires\",\n        \"servings\": 3,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Chocolat\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Poires au jus\",\n                \"quantity\": 0.5,\n                \"unit\" : \"boites\"\n            },\n            {\n                \"ingredient\": \"Boudoirs\",\n                \"quantity\": 15\n            }\n        ],\n        \"time\": 60,\n        \"description\":\"Commencez par préparer la mousse au chocolat au moins 2 heures avant. Quand la mousse est prête et a reposée. Alors mouiller les boudoirs dans le jus des poires. Disposer. Alterner : mousse au chocolat, boudoirs et poires. Mettre au frais.\",\n        \"appliance\": \"Moule à charlotte\",\n        \"ustensils\":[\"saladier\", \"couteau\", \"fouet\"]\n    },\n    {\n        \"id\": 43,\n        \"image\": \"Recette43.jpg\",\n        \"name\": \"Tarte au citron\",\n        \"servings\": 6,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pâte brisée\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Beurre fondu\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Citron\"\n            }\n        ],\n        \"time\": 50,\n        \"description\":\"Préchauffez le fours à 200°. Étaler la pate. La mettre dans un moule. Battre les oeufs avec le sucre. Ajouter le jus de citron et le beurre. Verser le tout sur la pate. Au four 30 minutes. Bon appetit \",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"rouleau à patisserie\", \"moule à tarte\", \"presse citron\"]\n    }, \n    {\n        \"id\": 44,\n        \"image\": \"Recette44.jpg\",\n        \"name\": \"Crème dessert au chocolat\",\n        \"servings\": 6,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 1,\n                \"unit\": \"litres\"\n            },\n            {\n                \"ingredient\": \"Chocolat\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 50,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"farine\",\n                \"quantity\": 40,\n                \"unit\": \"grammes\"\n            }\n        ],\n        \"time\": 15,\n        \"description\":\"Mélanger la farine et le beurre fondu en ajoutant le lait peu à peu. Ajouter du sucre après la cuisson. Bien mélanger. Ajouter le chocolat en morceaux et laisser chauffer 8 minutes en mélangeant avec une cuillère en bois. Mettre dans des verres\",\n        \"appliance\": \"Casserole\",\n        \"ustensils\":[\"cuillère en bois\"]\n    },\n    {\n        \"id\": 45,\n        \"image\": \"Recette45.jpg\",\n        \"name\": \"Crème pâtissière\",\n        \"servings\": 8,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 50,\n                \"unit\": \"cl\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Farine\",\n                \"quantity\": 30,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre\",\n                \"quantity\": 80,\n                \"unit\":\"grammes\"\n            }\n        ],\n        \"time\": 30,\n        \"description\":\"Faire bouillir le lait ( on peut y ajouter de l'essence de vanille. Battre les oeufs et le sucre, ajouter la farine puis finalement ajouter le lait chaud. Remettre à feu doux pour faire épaissir en remuant pendant 5 à 10 minutes.\",\n        \"appliance\": \"Casserole\",\n        \"ustensils\":[\"fouet\",\"saladier\"]\n    },\n    {\n        \"id\": 46,\n        \"image\": \"Recette46.jpg\",\n        \"name\": \"Far breton\",\n        \"servings\": 6,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Farine\",\n                \"quantity\": 250,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre\",\n                \"quantity\": 150,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre vanillé\",\n                \"quantity\": 1,\n                \"unit\": \"sachets\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 4\n            },\n            {\n                \"ingredient\": \"Lait\",\n                \"quantity\": 1,\n                \"unit\": \"litre\"\n            },\n            {\n                \"ingredient\": \"Pruneaux\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            }\n        ],\n        \"time\": 60,\n        \"description\":\"Mélanger la farine avec le sucre et les oeufs en ajoutant du sucre vanillé. Ajouter le lait petit à petit. Ajouter un petit vers de rhum. Verser la masse dans un plat beurré y placer les pruneaux et faire cuire à 200° pendant 45 minutes\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"fouet\", \"moule\", \"verres\"]\n    },\n    {\n        \"id\": 47,\n        \"image\": \"Recette47.jpg\",\n        \"name\": \"Mousse au citron\",\n        \"servings\": 6,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Jus de citron\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Mascarpone\",\n                \"quantity\": 250,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre\",\n                \"quantity\": 100,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Crème Fraîche\",\n                \"quantity\": 20,\n                \"unit\":\"cl\"\n            }\n        ],\n        \"time\": 5,\n        \"description\":\"Mélanger le jus de citron avec le sucre et la mascarpone. Ajouter la crème fraîche. Mélanger le tout et mettre au congélateur pendant 1 heure. Servir\",\n        \"appliance\": \"Saladier\",\n        \"ustensils\":[\"fouet\", \"verres\", \"cuillère en bois\"]\n    },\n    {\n        \"id\": 48,\n        \"image\": \"Recette48.jpg\",\n        \"name\": \"Pizza\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pâte à pizza\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Tomates pelées\",\n                \"quantity\": 1,\n                \"unit\": \"boites\"\n            },\n            {\n                \"ingredient\": \"Lardons\",\n                \"quantity\": 1,\n                \"unit\": \"barquettes\"\n            },\n            {\n                \"ingredient\": \"Champignons de paris\",\n                \"quantity\": 1,\n                \"unit\":\"boites\"\n            },\n            {\n                \"ingredient\": \"Gruyère\",\n                \"quantity\": 200,\n                \"unit\": \"grammes\"\n            }\n        ],\n        \"time\": 40,\n        \"description\":\"Étaler la pate a pizza. Écraser les tomates pelées, les étaler sur la pâte, ajouter les lardons et les champignons. Ajouter le gruyère eet passer au four à 220° durant 20 minutes\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"rouleau à patisserie\", \"râpe à fromage\",\"couteau\"]\n    },\n    {\n        \"id\": 49,\n        \"image\": \"Recette49.jpg\",\n        \"name\": \"Smoothie tropical\",\n        \"servings\": 4,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Bananes\",\n                \"quantity\": 2\n            },\n            {\n                \"ingredient\": \"Kiwis\",\n                \"quantity\": 3\n            },\n            {\n                \"ingredient\": \"Mangue\",\n                \"quantity\": 1\n            },\n            {\n                \"ingredient\": \"Ananas\",\n                \"quantity\": 4,\n                \"unit\":\"tranches\"\n            },\n            {\n                \"ingredient\": \"Miel\",\n                \"quantity\": 2,\n                \"unit\": \"cuillères à soupe\"\n            }\n        ],\n        \"time\": 0,\n        \"description\":\"Découper les fruits. Le passer au blender jusqu'à obtenir une texture liquide. Mettre au frais. Servir\",\n        \"appliance\": \"Blender\",\n        \"ustensils\":[\"couteau\", \"verres\"]\n    },\n    {\n        \"id\": 50,\n        \"image\": \"Recette50.jpg\",\n        \"name\": \"Frangipane\",\n        \"servings\": 2,\n        \"ingredients\": [\n            {\n                \"ingredient\": \"Pâte feuilletée\",\n                \"quantity\": 400,\n                \"unit\":\"grammes\"\n            },\n            {\n                \"ingredient\": \"Oeuf\",\n                \"quantity\": 6\n            },\n            {\n                \"ingredient\": \"Poudre d'amendes\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Beurre\",\n                \"quantity\": 500,\n                \"unit\": \"grammes\"\n            },\n            {\n                \"ingredient\": \"Sucre glace\",\n                \"quantity\": 500,\n                \"unit\":\"grammes\"\n            }\n        ],\n        \"time\": 60,\n        \"description\":\"Préparer la frangipane : Mélanger le sucre la poudre d'amandes, le beurre et les oeufs. Étaler la moitié de la pate feuilleté et mettre dans un moule à tarte. Garnir de frangipane et recouvrir du reste de pate feuilletée. Mettre au four 30 minutes\",\n        \"appliance\": \"Four\",\n        \"ustensils\":[\"rouleau à patisserie\",\"fouet\"]\n    }\n]"}}